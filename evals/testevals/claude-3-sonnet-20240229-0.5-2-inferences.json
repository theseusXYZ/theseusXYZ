[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nimport subprocess\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"10\", \"2\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test missing arguments\ndef test_missing_arguments():\n    # Arrange\n    args = [\"add\", \"2\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test zero operands\ndef test_zero_operands():\n    # Arrange\n    args = [\"add\", \"0\", \"0\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 0\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000\", \"1000000\"]\n\n    # Act\n    result = subprocess.run([\"python\", \"evalmath.py\"] + args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 1000000000000\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\n# Helper function to run the application\ndef run_app(args):\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE)\n    return result.stdout.decode().strip(), result.stderr.decode().strip()\n\n# Test cases\ndef test_addition_valid_inputs():\n    \"\"\"\n    Test addition operation with valid inputs\n    \"\"\"\n    stdout, stderr = run_app([\"add\", \"2\", \"3\"])\n    assert stderr == \"\"\n    assert stdout == \"Result: 5\"\n\ndef test_multiplication_valid_inputs():\n    \"\"\"\n    Test multiplication operation with valid inputs\n    \"\"\"\n    stdout, stderr = run_app([\"multiply\", \"4\", \"5\"])\n    assert stderr == \"\"\n    assert stdout == \"Result: 20\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Test invalid operation\n    \"\"\"\n    stdout, stderr = run_app([\"divide\", \"6\", \"2\"])\n    assert \"Error\" in stderr or \"Exception\" in stderr\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Test non-integer inputs\n    \"\"\"\n    stdout, stderr = run_app([\"add\", \"2.5\", \"3\"])\n    assert \"Error\" in stderr or \"Exception\" in stderr\n\ndef test_zero_inputs():\n    \"\"\"\n    Test zero inputs\n    \"\"\"\n    stdout, stderr = run_app([\"add\", \"0\", \"0\"])\n    assert stderr == \"\"\n    assert stdout == \"Result: 0\"\n\ndef test_large_numbers():\n    \"\"\"\n    Test large numbers\n    \"\"\"\n    stdout, stderr = run_app([\"multiply\", \"1000000\", \"1000000\"])\n    assert stderr == \"\"\n    assert stdout == \"Result: 1000000000000\"\n\ndef test_output_formatting():\n    \"\"\"\n    Test output formatting\n    \"\"\"\n    stdout, stderr = run_app([\"add\", \"2\", \"3\"])\n    assert stderr == \"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import subprocess\n\ndef test_valid_addition():\n    \"\"\"\n    Test that the application correctly performs addition on valid integer inputs.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"add\", \"2\", \"3\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)\n    assert result.stdout.strip() == \"Result: 5\"\n\ndef test_valid_multiplication():\n    \"\"\"\n    Test that the application correctly performs multiplication on valid integer inputs.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"multiply\", \"4\", \"5\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)\n    assert result.stdout.strip() == \"Result: 20\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Test that the application handles invalid operations gracefully.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"divide\", \"6\", \"2\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    assert result.returncode != 0\n\ndef test_non_integer_input():\n    \"\"\"\n    Test that the application handles non-integer input values gracefully.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    \"\"\"\n    Test that the application handles missing arguments gracefully.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"add\", \"2\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    assert result.returncode != 0\n\ndef test_large_integer_inputs():\n    \"\"\"\n    Test that the application can handle large integer inputs.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"multiply\", \"1000000000\", \"1000000000\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)\n    assert result.stdout.strip() == \"Result: 1000000000000000000\"\n\ndef test_zero_inputs():\n    \"\"\"\n    Test that the application correctly handles zero inputs.\n    \"\"\"\n    cmd = [\"python\", \"evalmath.py\", \"add\", \"0\", \"0\"]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, text=True)"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import subprocess\n\n# Test valid addition operation\ndef test_valid_addition():\n    \"\"\"\n    Test that the application correctly performs addition on valid inputs.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"2\", \"3\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 5\"\n    assert result.returncode == 0\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    \"\"\"\n    Test that the application correctly performs multiplication on valid inputs.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 20\"\n    assert result.returncode == 0\n\n# Test invalid operation\ndef test_invalid_operation():\n    \"\"\"\n    Test that the application handles invalid operations gracefully.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"divide\", \"6\", \"2\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-numeric input\ndef test_non_numeric_input():\n    \"\"\"\n    Test that the application handles non-numeric inputs gracefully.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"a\", \"3\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test missing arguments\ndef test_missing_arguments():\n    \"\"\"\n    Test that the application handles missing arguments gracefully.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"2\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test large numbers\ndef test_large_numbers():\n    \"\"\"\n    Test that the application can handle large numbers.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"multiply\", \"1000000000\", \"1000000000\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 1000000000000000000\"\n    assert result.returncode == 0\n\n# Test zero operands\ndef test_zero_operands():\n    \"\"\"\n    Test that the application handles zero operands correctly.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"0\", \"0\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test addition of two positive integers\ndef test_add_positive_integers():\n    # Arrange\n    args = [\"add\", \"3\", \"5\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\n# Test multiplication of two positive integers\ndef test_multiply_positive_integers():\n    # Arrange\n    args = [\"multiply\", \"4\", \"6\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\n# Test addition of negative and positive integers\ndef test_add_negative_positive_integers():\n    # Arrange\n    args = [\"add\", \"-2\", \"7\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test multiplication of negative and positive integers\ndef test_multiply_negative_positive_integers():\n    # Arrange\n    args = [\"multiply\", \"-3\", \"8\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -24\"\n\n# Test addition with zero\ndef test_add_with_zero():\n    # Arrange\n    args = [\"add\", \"0\", \"5\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test multiplication with zero\ndef test_multiply_with_zero():\n    # Arrange\n    args = [\"multiply\", \"0\", \"7\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"4\", \"2\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"3.5\", \"2\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test missing arguments\ndef test_missing_arguments():\n    # Arrange\n    args = [\"add\", \"3\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test excessive arguments\ndef test_excessive_arguments():\n    # Arrange\n    args = [\"multiply\", \"2\", \"3\", \"4\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    \n    # Assert\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Helper function to run the CLI application\ndef run_cli(args):\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    return result.stdout, result.stderr\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr == \"\"\n    assert stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr == \"\"\n    assert stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"6\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr != \"\"\n\n# Test non-numeric input\ndef test_non_numeric_input():\n    # Arrange\n    args = [\"add\", \"a\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr != \"\"\n\n# Test missing arguments\ndef test_missing_arguments():\n    # Arrange\n    args = [\"add\", \"2\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr != \"\"\n\n# Test extra arguments\ndef test_extra_arguments():\n    # Arrange\n    args = [\"multiply\", \"2\", \"3\", \"4\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr != \"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n    \n    # Assert\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation \ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n    \n    # Assert\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"6\", \"2\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test missing arguments\ndef test_missing_arguments():\n    # Arrange\n    args = [\"add\", \"2\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n    \n    # Assert\n    assert result.returncode != 0\n\n# Test zero operands\ndef test_zero_operands():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n    \n    # Assert\n    assert result.stdout.strip() == \"Result: 0\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"add\", \"1000000000\", \"2000000000\"]\n    \n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n    \n    # Assert\n    assert result.stdout.strip() == \"Result: 3000000000\""}]
