[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for invalid operation\"\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for non-integer input\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Helper function to run the CLI application\ndef run_cli(args):\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    return result.stdout.strip(), result.stderr.strip()\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 5\"\n    assert stderr == \"\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 20\"\n    assert stderr == \"\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 2000000000000000000\"\n    assert stderr == \"\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: -5\"\n    assert stderr == \"\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 0\"\n    assert stderr == \"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for invalid operation\"\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for non-integer input\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import Popen, PIPE\n\n# Helper function to run the CLI application\ndef run_cli(args):\n    process = Popen([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE)\n    stdout, stderr = process.communicate()\n    return stdout.decode().strip(), stderr.decode().strip()\n\n# Test cases\ndef test_valid_addition():\n    \"\"\"\n    Test valid addition operation\n    \"\"\"\n    stdout, stderr = run_cli([\"add\", \"2\", \"3\"])\n    assert stdout == \"Result: 5\"\n    assert stderr == \"\"\n\ndef test_valid_multiplication():\n    \"\"\"\n    Test valid multiplication operation\n    \"\"\"\n    stdout, stderr = run_cli([\"multiply\", \"4\", \"5\"])\n    assert stdout == \"Result: 20\"\n    assert stderr == \"\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Test invalid operation\n    \"\"\"\n    stdout, stderr = run_cli([\"subtract\", \"2\", \"3\"])\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\ndef test_non_integer_input():\n    \"\"\"\n    Test non-integer input\n    \"\"\"\n    stdout, stderr = run_cli([\"add\", \"2.5\", \"3\"])\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\ndef test_large_numbers():\n    \"\"\"\n    Test large numbers\n    \"\"\"\n    stdout, stderr = run_cli([\"multiply\", \"1000000000\", \"2000000000\"])\n    assert stdout == \"Result: 2000000000000000000\"\n    assert stderr == \"\"\n\ndef test_negative_numbers():\n    \"\"\"\n    Test negative numbers\n    \"\"\"\n    stdout, stderr = run_cli([\"add\", \"-2\", \"-3\"])\n    assert stdout == \"Result: -5\"\n    assert stderr == \"\"\n\ndef test_zero_inputs():\n    \"\"\"\n    Test zero inputs\n    \"\"\"\n    stdout, stderr = run_cli([\"multiply\", \"0\", \"5\"])\n    assert stdout == \"Result: 0\"\n    assert stderr == \"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Helper function to run the CLI application\ndef run_cli(args):\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    return result.stdout.strip(), result.stderr.strip()\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 5\"\n    assert stderr == \"\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 20\"\n    assert stderr == \"\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"Error\" in stderr\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 2000000000000000000\"\n    assert stderr == \"\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: -5\"\n    assert stderr == \"\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"Result: 0\"\n    assert stderr == \"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"6\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 0\"\n\n# Test missing arguments\ndef test_missing_arguments():\n    # Arrange\n    args = [\"add\", \"2\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\n# Test extra arguments\ndef test_extra_arguments():\n    # Arrange\n    args = [\"multiply\", \"2\", \"3\", \"4\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, text=True)\n\n    # Assert\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 5\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 20\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"2\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for invalid operation\"\n\n# Test non-integer input\ndef test_non_integer_input():\n    # Arrange\n    args = [\"add\", \"2.5\", \"3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode != 0, \"Command should fail for non-integer input\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"1000000000\", \"2000000000\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 2000000000000000000\"\n\n# Test negative numbers\ndef test_negative_numbers():\n    # Arrange\n    args = [\"add\", \"-2\", \"-3\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: -5\"\n\n# Test zero inputs\ndef test_zero_inputs():\n    # Arrange\n    args = [\"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n\n    # Assert\n    assert result.returncode == 0, f\"Command failed with error: {result.stderr}\"\n    assert result.stdout.strip() == \"Result: 0\""}]
