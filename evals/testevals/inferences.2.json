[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_numbers():\n    \"\"\"\n    Verify that the application can correctly add two numbers.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\"]\n    assert main(args) == \"Result: 8\"\n\ndef test_multiply_numbers():\n    \"\"\"\n    Verify that the application can correctly multiply two numbers.\n    \"\"\"\n    args = [\"multiply\", \"7\", \"4\"]\n    assert main(args) == \"Result: 28\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations gracefully.\n    \"\"\"\n    args = [\"divide\", \"10\", \"2\"]\n    with pytest.raises(ValueError) as e:\n        main(args)\n    assert str(e.value) == \"Invalid operation. Please use 'add' or 'multiply'.\"\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs gracefully.\n    \"\"\"\n    args = [\"add\", \"5.5\", \"3.2\"]\n    with pytest.raises(ValueError) as e:\n        main(args)\n    assert str(e.value) == \"Invalid input. Please provide integers.\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\"]\n    with pytest.raises(ValueError) as e:\n        main(args)\n    assert str(e.value) == \"Insufficient arguments. Please provide operation, first number, and second number.\"\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\", \"extra\"]\n    with pytest.raises(ValueError) as e:\n        main(args)"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_operation():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\"]\n    expected_output = \"Result: 8\"\n    assert main(args) == expected_output\n\ndef test_multiply_operation():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    args = [\"multiply\", \"4\", \"6\"]\n    expected_output = \"Result: 24\"\n    assert main(args) == expected_output\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations correctly.\n    \"\"\"\n    args = [\"subtract\", \"2\", \"3\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application handles non-integer inputs correctly.\n    \"\"\"\n    args = [\"add\", \"2.5\", \"3.7\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_empty_inputs():\n    \"\"\"\n    Verify that the application handles empty inputs correctly.\n    \"\"\"\n    args = [\"\", \"\", \"\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_single_argument():\n    \"\"\"\n    Verify that the application handles a single argument correctly.\n    \"\"\"\n    args = [\"add\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_many_arguments():\n    \"\"\"\n    Verify that the application handles a large number of arguments correctly.\n    \"\"\"\n    args = [\"add\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n    with pytest.raises(Exception):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from unittest.mock import patch\nimport sys\nfrom evalmath import main\n\ndef test_add_operation():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"add\", \"5\", \"3\"]):\n        assert main() == \"Result: 8\"\n\ndef test_multiply_operation():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"multiply\", \"4\", \"6\"]):\n        assert main() == \"Result: 24\"\n\ndef test_invalid_operation():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"subtract\", \"2\", \"4\"]), \\\n         pytest.raises(ValueError) as exc_info:\n        main()\n    assert str(exc_info.value) == \"Invalid operation: subtract\"\n\ndef test_non_integer_arguments():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"add\", \"2.5\", \"3.7\"]), \\\n         pytest.raises(ValueError) as exc_info:\n        main()\n    assert str(exc_info.value) == \"invalid literal for int() with base 10: '2.5'\"\n\ndef test_missing_arguments():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"add\", \"5\"]), \\\n         pytest.raises(TypeError) as exc_info:\n        main()\n    assert str(exc_info.value) == \"evalmath() missing 1 required positional argument: 'b'\"\n\ndef test_divide_by_zero():\n    with patch.object(sys, 'argv', [\"evalmath.py\", \"divide\", \"10\", \"0\"]), \\\n         pytest.raises(ZeroDivisionError) as exc_info:\n        main()"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import check_output, CalledProcessError\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"]).decode().strip()\n    assert output == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"multiply\", \"7\", \"4\"]).decode().strip()\n    assert output == \"Result: 28\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as e:\n        check_output([\"python\", \"evalmath.py\", \"subtract\", \"10\", \"5\"])\n    assert \"Invalid operation. Please use 'add' or 'multiply'.\" in str(e.value.output)\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs gracefully.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as e:\n        check_output([\"python\", \"evalmath.py\", \"add\", \"five\", \"three\"])\n    assert \"Invalid input. Please provide integers.\" in str(e.value.output)\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as e:\n        check_output([\"python\", \"evalmath.py\", \"add\", \"5\"])\n    assert \"Missing arguments. Please provide operation, first number, and second number.\" in str(e.value.output)\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as e:\n        check_output([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"extra\"])"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from unittest.mock import patch\nfrom evalmath import main\n\ndef test_add_operation():\n    \"\"\"\n    Verify that the application can correctly add two integers.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', '5', '3']):\n        assert main() == \"Result: 8\"\n\ndef test_multiply_operation():\n    \"\"\"\n    Verify that the application can correctly multiply two integers.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'multiply', '7', '4']):\n        assert main() == \"Result: 28\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'subtract', '10', '5']), \\\n         pytest.raises(ValueError) as exc_info:\n        main()\n    assert str(exc_info.value) == \"Invalid operation\"\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', 'five', '3']), \\\n         pytest.raises(ValueError) as exc_info:\n        main()\n    assert str(exc_info.value) == \"invalid literal for int() with base 10: 'five'\"\n\ndef test_division_by_zero():\n    \"\"\"\n    Verify that the application handles division by zero gracefully.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'divide', '10', '0']), \\\n         pytest.raises(ZeroDivisionError) as exc_info:\n        main()"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from unittest.mock import patch\nfrom evalmath import main\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"add\", \"5\", \"10\"]):\n        assert main() == \"Result: 15\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"multiply\", \"3\", \"7\"]):\n        assert main() == \"Result: 21\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations gracefully.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"divide\", \"10\", \"5\"]):\n        with pytest.raises(ValueError) as e:\n            main()\n        assert str(e.value) == \"Invalid operation. Please use 'add' or 'multiply'.\"\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs gracefully.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"add\", \"5.5\", \"10\"]):\n        with pytest.raises(ValueError) as e:\n            main()\n        assert str(e.value) == \"Invalid input. Please provide integers.\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"add\", \"5\"]):\n        with pytest.raises(ValueError) as e:\n            main()\n        assert str(e.value) == \"Insufficient arguments. Please provide operation, first number, and second number.\"\n\ndef test_multiply_by_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for multiplication.\n    \"\"\"\n    with patch('sys.argv', [\"evalmath.py\", \"multiply\", \"5\", \"0\"]):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_operation():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_operation():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error: Invalid operation\" in result.stderr\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer input correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"3.14\", \"2.71\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error: Invalid input\" in result.stderr\n\ndef test_empty_input():\n    \"\"\"\n    Verify that the application handles empty input correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"\", \"\", \"\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 12\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"3\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 12\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify the application handles an invalid operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"5\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify the application handles non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"five\", \"seven\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_multiply_with_zero_second_argument():\n    \"\"\"\n    Verify the application handles zero as the second argument for multiplication.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"7\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_multiply_with_zero_first_argument():\n    \"\"\"\n    Verify the application handles zero as the first argument for multiplication.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_add_with_negative_integers():\n    \"\"\"\n    Verify the application handles negative integers for the add operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-5\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 2\"\n\ndef test_multiply_with_negative_integers():\n    \"\"\"\n    Verify the application handles negative integers for the multiply operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"-3\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"10\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"3.5\", \"2.1\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for multiplication correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"7\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_add_negative():\n    \"\"\"\n    Verify that the application handles negative numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_addition_with_valid_inputs():\n    \"\"\"Verify the addition operation with valid inputs.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiplication_with_valid_inputs():\n    \"\"\"Verify the multiplication operation with valid inputs.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"Verify that the application handles invalid operations gracefully.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_inputs():\n    \"\"\"Verify that the application handles non-integer inputs correctly.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3.7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_zero_as_second_operand_for_multiplication():\n    \"\"\"Verify the multiplication operation with zero as the second operand.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"8\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_zero_as_first_operand_for_addition():\n    \"\"\"Verify the addition operation with zero as the first operand.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"0\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 5\"\n\ndef test_negative_operands_for_addition():\n    \"\"\"Verify the addition operation with negative operands.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"-3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: -5\"\n\ndef test_negative_operands_for_multiplication():\n    \"\"\"Verify the multiplication operation with negative operands.\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"-4\", \"-6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)"}]
