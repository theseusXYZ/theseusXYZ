[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_valid_integers():\n    \"\"\"Verify that the application can add two valid integers.\"\"\"\n    assert main([\"add\", \"5\", \"10\"]) == \"Result: 15\"\n\ndef test_multiply_valid_integers():\n    \"\"\"Verify that the application can multiply two valid integers.\"\"\"\n    assert main([\"multiply\", \"3\", \"7\"]) == \"Result: 21\"\n\ndef test_invalid_operation():\n    \"\"\"Verify that the application handles an invalid operation.\"\"\"\n    with pytest.raises(ValueError):\n        main([\"subtract\", \"4\", \"6\"])\n\ndef test_non_integer_first_number():\n    \"\"\"Verify that the application handles non-integer input for the first number.\"\"\"\n    with pytest.raises(ValueError):\n        main([\"add\", \"abc\", \"10\"])\n\ndef test_non_integer_second_number():\n    \"\"\"Verify that the application handles non-integer input for the second number.\"\"\"\n    with pytest.raises(ValueError):\n        main([\"multiply\", \"5\", \"xyz\"])\n\ndef test_very_large_numbers():\n    \"\"\"Verify that the application can handle very large numbers.\"\"\"\n    assert main([\"add\", \"999999999999999\", \"999999999999999\"]) == \"Result: 1999999999999998\"\n\ndef test_very_small_numbers():\n    \"\"\"Verify that the application can handle very small numbers.\"\"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from unittest.mock import patch\nfrom evalmath import main\n\ndef test_add_operation():\n    \"\"\"\n    Verify that the application correctly adds two numbers.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', '5', '3']):\n        assert main() == \"Result: 8\"\n\ndef test_multiply_operation():\n    \"\"\"\n    Verify that the application correctly multiplies two numbers.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'multiply', '4', '6']):\n        assert main() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations gracefully.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'subtract', '10', '5']):\n        with pytest.raises(ValueError) as exc_info:\n            main()\n        assert str(exc_info.value) == \"Invalid operation. Please use 'add' or 'multiply'.\"\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', '5.5', '3.2']):\n        with pytest.raises(ValueError) as exc_info:\n            main()\n        assert str(exc_info.value) == \"Invalid input. Please provide integers.\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', '5']):\n        with pytest.raises(ValueError) as exc_info:\n            main()\n        assert str(exc_info.value) == \"Invalid number of arguments. Please provide operation, first number, and second number.\"\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments.\n    \"\"\"\n    with patch('sys.argv', ['evalmath.py', 'add', '5', '3', 'extra']):\n        with pytest.raises(ValueError) as exc_info:\n            main()"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify addition of two positive integers.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\"]\n    assert main(args) == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify multiplication of two positive integers.\n    \"\"\"\n    args = [\"multiply\", \"4\", \"6\"]\n    assert main(args) == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify graceful handling of invalid operation.\n    \"\"\"\n    args = [\"subtract\", \"2\", \"3\"]\n    assert main(args) == \"Invalid operation. Please use \\\"add\\\" or \\\"multiply\\\".\"\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify graceful handling of non-integer inputs.\n    \"\"\"\n    args = [\"add\", \"2.5\", \"3\"]\n    with pytest.raises(ValueError):\n        main(args)\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify graceful handling of missing arguments.\n    \"\"\"\n    args = [\"add\", \"5\"]\n    with pytest.raises(ValueError):\n        main(args)\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify graceful handling of extra arguments.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\", \"extra\"]\n    with pytest.raises(ValueError):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import perform_operation\n\ndef test_successful_addition():\n    \"\"\"\n    Verify successful addition of two integers.\n    \"\"\"\n    result = perform_operation(\"add\", 5, 3)\n    assert result == 8\n\ndef test_successful_multiplication():\n    \"\"\"\n    Verify successful multiplication of two integers.\n    \"\"\"\n    result = perform_operation(\"multiply\", 4, 7)\n    assert result == 28\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify handling of invalid operation.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        perform_operation(\"divide\", 10, 2)\n    assert str(e.value) == \"Invalid operation. Please use 'add' or 'multiply'.\"\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify handling of non-integer arguments.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        perform_operation(\"add\", \"five\", \"three\")\n    assert str(e.value) == \"Invalid input. Please provide integers.\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify handling of missing arguments.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        perform_operation(\"add\")\n    assert str(e.value) == \"Invalid input. Please provide three arguments: operation, number1, number2.\"\n\ndef test_multiplication_with_zero():\n    \"\"\"\n    Verify handling of zero as second argument for multiplication.\n    \"\"\"\n    result = perform_operation(\"multiply\", 4, 0)"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_numbers():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    assert main([\"add\", \"5\", \"3\"]) == \"Result: 8\"\n\ndef test_multiply_numbers():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    assert main([\"multiply\", \"4\", \"6\"]) == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations correctly.\n    \"\"\"\n    with pytest.raises(ValueError):\n        main([\"subtract\", \"10\", \"5\"])\n\ndef test_invalid_input():\n    \"\"\"\n    Verify that the application handles non-integer input correctly.\n    \"\"\"\n    with pytest.raises(ValueError):\n        main([\"add\", \"3.14\", \"2.71\"])\n\ndef test_insufficient_arguments():\n    \"\"\"\n    Verify that the application handles empty input correctly.\n    \"\"\"\n    with pytest.raises(ValueError):\n        main([])\n\ndef test_single_argument():\n    \"\"\"\n    Verify that the application handles a single argument correctly.\n    \"\"\"\n    with pytest.raises(ValueError):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import evalmath\n\ndef test_add_valid_inputs():\n    \"\"\"Test addition with valid inputs.\"\"\"\n    assert evalmath(\"add\", 5, 3) == \"Result: 8\"\n\ndef test_multiply_valid_inputs():\n    \"\"\"Test multiplication with valid inputs.\"\"\"\n    assert evalmath(\"multiply\", 4, 6) == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"Test handling of invalid operation.\"\"\"\n    with pytest.raises(ValueError) as e:\n        evalmath(\"subtract\", 10, 5)\n    assert str(e.value) == \"Invalid operation: 'subtract'\"\n\ndef test_non_integer_inputs():\n    \"\"\"Test handling of non-integer inputs.\"\"\"\n    with pytest.raises(ValueError) as e:\n        evalmath(\"add\", \"abc\", 5)\n    assert str(e.value) == \"invalid literal for int() with base 10: 'abc'\"\n\ndef test_missing_arguments():\n    \"\"\"Test handling of missing arguments.\"\"\"\n    with pytest.raises(TypeError) as e:\n        evalmath(\"add\", 5)\n    assert str(e.value) == \"evalmath() missing 1 required positional argument: 'number2'\"\n\ndef test_divide_by_zero():\n    \"\"\"Test handling of division by zero.\"\"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import eval_math\n\ndef test_add_numbers():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    assert eval_math(\"add\", 5, 3) == 8\n\ndef test_multiply_numbers():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    assert eval_math(\"multiply\", 4, 6) == 24\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations gracefully.\n    \"\"\"\n    with pytest.raises(ValueError) as exc_info:\n        eval_math(\"divide\", 10, 2)\n    assert str(exc_info.value) == \"Invalid operation: divide\"\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application handles non-integer inputs.\n    \"\"\"\n    with pytest.raises(ValueError) as exc_info:\n        eval_math(\"add\", \"3.5\", \"2.7\")\n    assert str(exc_info.value) == \"invalid literal for int() with base 10: '3.5'\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments.\n    \"\"\"\n    with pytest.raises(TypeError) as exc_info:\n        eval_math(\"add\", 5)\n    assert str(exc_info.value) == \"eval_math() missing 1 required positional argument: 'b'\"\n\ndef test_too_many_arguments():\n    \"\"\"\n    Verify that the application handles too many arguments.\n    \"\"\"\n    with pytest.raises(TypeError) as exc_info:\n        eval_math(\"add\", 5, 3, 10)"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import execute_operation\n\ndef test_add_valid_inputs():\n    \"\"\"\n    Verify the addition operation with valid inputs.\n    \"\"\"\n    assert execute_operation(\"add\", 5, 7) == 12\n\ndef test_multiply_valid_inputs():\n    \"\"\"\n    Verify the multiplication operation with valid inputs.\n    \"\"\"\n    assert execute_operation(\"multiply\", 3, 4) == 12\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify the handling of an invalid operation.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        execute_operation(\"subtract\", 10, 5)\n    assert str(e.value) == \"Invalid operation. Please use 'add' or 'multiply'.\"\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify the handling of non-integer inputs.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        execute_operation(\"add\", 5.5, 7)\n    assert str(e.value) == \"Input must be integers.\"\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify the handling of missing arguments.\n    \"\"\"\n    with pytest.raises(ValueError) as e:\n        execute_operation(\"add\", 5)\n    assert str(e.value) == \"Invalid number of arguments. Please provide operation, first number, and second number.\"\n\ndef test_multiply_zero_second_argument():\n    \"\"\"\n    Verify the handling of zero as the second argument for multiplication.\n    \"\"\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_success():\n    \"\"\"Verify successful addition of two integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 15\"\n\ndef test_multiply_success():\n    \"\"\"Verify successful multiplication of two integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"3\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 21\"\n\ndef test_invalid_operation():\n    \"\"\"Verify invalid operation raises an exception\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"5\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid operation\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"Verify non-integer arguments raise an exception\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid argument\" in result.stderr\n\ndef test_large_add():\n    \"\"\"Verify successful addition of large integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"1000000000\", \"2000000000\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 3000000000\"\n\ndef test_large_multiply():\n    \"\"\"Verify successful multiplication of large integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"1000000\", \"2000000\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 2000000000000\"\n\ndef test_add_negative():\n    \"\"\"Verify successful addition of negative integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-5\", \"-10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -15\"\n\ndef test_multiply_negative():\n    \"\"\"Verify successful multiplication of negative integers\"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"-3\", \"-7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import check_output, CalledProcessError\n\ndef test_add_positive():\n    \"\"\"\n    Verify that the application can perform addition correctly.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"add\", \"10\", \"20\"])\n    assert output.decode().strip() == \"Result: 30\"\n\ndef test_multiply_positive():\n    \"\"\"\n    Verify that the application can perform multiplication correctly.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"multiply\", \"5\", \"6\"])\n    assert output.decode().strip() == \"Result: 30\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations correctly.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as exc_info:\n        check_output([\"python\", \"evalmath.py\", \"subtract\", \"10\", \"5\"])\n    assert \"Invalid operation: 'subtract'\" in str(exc_info.value.stderr)\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application handles non-integer inputs correctly.\n    \"\"\"\n    with pytest.raises(CalledProcessError) as exc_info:\n        check_output([\"python\", \"evalmath.py\", \"add\", \"ten\", \"20\"])\n    assert \"Invalid argument: 'ten'\" in str(exc_info.value.stderr)\n\ndef test_zero_input():\n    \"\"\"\n    Verify that the application handles zero as an input correctly.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"100\"])\n    assert output.decode().strip() == \"Result: 0\"\n\ndef test_negative_input():\n    \"\"\"\n    Verify that the application handles negative numbers correctly.\n    \"\"\"\n    output = check_output([\"python\", \"evalmath.py\", \"add\", \"-10\", \"-20\"])"}]
