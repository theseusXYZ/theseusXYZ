[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1\"\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an input.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application can handle non-integer inputs.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1\"\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an input.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_input():\n    \"\"\"\n    Verify that the application can handle non-integer inputs.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1\"\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an input.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application can handle non-integer inputs.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"two\", \"three\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_divide_by_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for the \"divide\" operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_empty_arguments():\n    \"\"\"\n    Verify that the application handles empty arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1\"\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an input.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application can handle non-integer inputs.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 8\"\n    assert result.returncode == 0\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 24\"\n    assert result.returncode == 0\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 1\"\n    assert result.returncode == 0\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an input.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 0\"\n    assert result.returncode == 0\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr\n    assert result.returncode != 0\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application can handle non-integer inputs.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 8\"\n    assert result.returncode == 0\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 24\"\n    assert result.returncode == 0\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 1\"\n    assert result.returncode == 0\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an operand.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.stdout.strip() == \"Result: 0\"\n    assert result.returncode == 0\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr\n    assert result.returncode != 0\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application can handle non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert \"Error\" in result.stderr"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"7\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 28\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"10\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"five\", \"three\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_divide_by_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for the \"divide\" operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_empty_arguments():\n    \"\"\"\n    Verify that the application handles empty arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_positive_integers():\n    \"\"\"\n    Verify that the application can add two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_positive_integers():\n    \"\"\"\n    Verify that the application can multiply two positive integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_add_negative_integers():\n    \"\"\"\n    Verify that the application can handle negative integers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1\"\n\ndef test_multiply_zero():\n    \"\"\"\n    Verify that the application can handle zero as an operand.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application can handle invalid operations.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application can handle non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"a\", \"b\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application can handle missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_numbers():\n    \"\"\"\n    Verify that the application can add two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_numbers():\n    \"\"\"\n    Verify that the application can multiply two numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles invalid operations correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_inputs():\n    \"\"\"\n    Verify that the application handles non-integer inputs correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3.7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_zero_input():\n    \"\"\"\n    Verify that the application handles zero as an input correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_negative_numbers():\n    \"\"\"\n    Verify that the application handles negative numbers correctly.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}]
