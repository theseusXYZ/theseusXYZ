[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nimport subprocess\n\ndef test_addition_positive_numbers():\n    # Test addition of two positive numbers\n    result = subprocess.run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiplication_positive_numbers():\n    # Test multiplication of two positive numbers\n    result = subprocess.run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_addition_positive_negative_numbers():\n    # Test addition of a positive and a negative number\n    result = subprocess.run([\"python\", \"evalmath.py\", \"add\", \"10\", \"-7\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: 3\"\n\ndef test_multiplication_positive_negative_numbers():\n    # Test multiplication of a positive and a negative number\n    result = subprocess.run([\"python\", \"evalmath.py\", \"multiply\", \"-3\", \"9\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: -27\"\n\ndef test_addition_with_zero():\n    # Test addition with zero as one of the numbers\n    result = subprocess.run([\"python\", \"evalmath.py\", \"add\", \"0\", \"12\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: 12\"\n\ndef test_multiplication_with_zero():\n    # Test multiplication with zero as one of the numbers\n    result = subprocess.run([\"python\", \"evalmath.py\", \"multiply\", \"15\", \"0\"], capture_output=True, text=True)\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    # Test with an invalid operation\n    with pytest.raises(subprocess.CalledProcessError):\n        subprocess.run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"5\"], check=True, capture_output=True, text=True)\n\ndef test_missing_arguments():\n    # Test with missing arguments\n    with pytest.raises(subprocess.CalledProcessError):\n        subprocess.run([\"python\", \"evalmath.py\", \"add\", \"7\"], check=True, capture_output=True, text=True)\n\ndef test_non_integer_arguments():\n    # Test with non-integer arguments\n    with pytest.raises(subprocess.CalledProcessError):\n        subprocess.run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"abc\"], check=True, capture_output=True, text=True)"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\ndef test_valid_addition():\n    # Test valid addition\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_valid_multiplication():\n    # Test valid multiplication\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 28\"\n\ndef test_addition_with_negative_numbers():\n    # Test addition with negative numbers\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 4\"\n\ndef test_multiplication_with_zero():\n    # Test multiplication with zero\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"0\", \"10\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_invalid_operation():\n    # Test invalid operation\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    # Test missing arguments\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_extra_arguments():\n    # Test extra arguments\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"7\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_non_integer_arguments():\n    # Test non-integer arguments\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"three\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\ndef test_addition():\n    # Test addition functionality\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiplication():\n    # Test multiplication functionality \n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 28\"\n\ndef test_invalid_operation():\n    # Test invalid operation\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_non_integer_arguments():\n    # Test non-integer arguments\n    result = run([\"python\", \"evalmath.py\", \"add\", \"five\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    # Test missing arguments\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_zero_operands():\n    # Test zero operands\n    result = run([\"python\", \"evalmath.py\", \"add\", \"0\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_large_numbers():\n    # Test large numbers\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"1000000\", \"1000000\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1000000000000\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\ndef test_addition_positive():\n    # Test addition with positive integers\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiplication_positive():\n    # Test multiplication with positive integers  \n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_addition_negative():\n    # Test addition with negative integers\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"-7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -9\"\n\ndef test_multiplication_negative():\n    # Test multiplication with negative integers\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"-3\", \"8\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: -24\"\n\ndef test_invalid_operation():\n    # Test invalid operation\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_non_integer_argument():\n    # Test non-integer argument \n    result = run([\"python\", \"evalmath.py\", \"add\", \"5.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_missing_argument():\n    # Test missing argument\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n\ndef test_addition_zero():\n    # Test addition with zero\n    result = run([\"python\", \"evalmath.py\", \"add\", \"0\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 7\"\n\ndef test_multiplication_zero():\n    # Test multiplication with zero\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"6\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\""}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\ndef test_valid_addition():\n    # Test valid addition operation\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_valid_multiplication():\n    # Test valid multiplication operation  \n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"7\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 28\"\n\ndef test_invalid_operation():\n    # Test invalid operation\n    result = run([\"python\", \"evalmath.py\", \"divide\", \"10\", \"2\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    # Test missing command-line arguments\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, text=True)  \n    assert result.returncode != 0\n\ndef test_non_integer_arguments():\n    # Test non-integer arguments\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"abc\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode != 0\n    \ndef test_zero_operands():\n    # Test zero operands \n    result = run([\"python\", \"evalmath.py\", \"add\", \"0\", \"0\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_large_numbers():\n    # Test large numbers\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"1000000\", \"1000000\"], stdout=PIPE, stderr=PIPE, text=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 1000000000000\""}]
