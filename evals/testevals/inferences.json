[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"two\", \"three\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"extra\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3.7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3.7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Exception\" in result.stderr or \"Error\" in result.stderr\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"error\" in result.stderr.lower()\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"7\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\"]\n    assert main(args) == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    args = [\"multiply\", \"4\", \"6\"]\n    assert main(args) == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    args = [\"subtract\", \"2\", \"3\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"2.5\", \"3\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\", \"extra\"]\n    with pytest.raises(Exception):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid operation. Please use 'add' or 'multiply'.\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid argument. Please provide integers.\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Missing arguments. Please provide operation, first number, and second number.\" in result.stderr\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"extra\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"7\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 28\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"10\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid operation. Please use 'add' or 'multiply'.\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"five\", \"three\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid argument. Please provide integers.\" in result.stderr\n\ndef test_multiply_with_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for multiplication.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"8\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 0\"\n\ndef test_add_with_negative_integers():\n    \"\"\"\n    Verify that the application handles negative integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"-2\", \"4\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr or \"Exception\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr or \"Exception\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Error\" in result.stderr or \"Exception\" in result.stderr\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\", \"extra\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from evalmath import main\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\"]\n    assert main(args) == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    args = [\"multiply\", \"4\", \"6\"]\n    assert main(args) == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    args = [\"subtract\", \"2\", \"3\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"2.5\", \"3\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\"]\n    with pytest.raises(Exception):\n        main(args)\n\ndef test_extra_arguments():\n    \"\"\"\n    Verify that the application handles extra arguments gracefully.\n    \"\"\"\n    args = [\"add\", \"5\", \"3\", \"7\"]\n    with pytest.raises(Exception):"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "from subprocess import run, PIPE\n\ndef test_add_valid_integers():\n    \"\"\"\n    Verify that the application can add two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 8\"\n\ndef test_multiply_valid_integers():\n    \"\"\"\n    Verify that the application can multiply two valid integers.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"4\", \"6\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0\n    assert result.stdout.strip() == \"Result: 24\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Verify that the application handles an invalid operation gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"subtract\", \"2\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid operation. Please use 'add' or 'multiply'.\" in result.stderr\n\ndef test_non_integer_arguments():\n    \"\"\"\n    Verify that the application handles non-integer arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\", \"2.5\", \"3\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Invalid argument. Please provide integers.\" in result.stderr\n\ndef test_missing_arguments():\n    \"\"\"\n    Verify that the application handles missing arguments gracefully.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"add\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode != 0\n    assert \"Missing arguments. Please provide operation, first number, and second number.\" in result.stderr\n\ndef test_multiply_by_zero():\n    \"\"\"\n    Verify that the application handles zero as the second argument for multiplication.\n    \"\"\"\n    result = run([\"python\", \"evalmath.py\", \"multiply\", \"5\", \"0\"], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    assert result.returncode == 0"}]
