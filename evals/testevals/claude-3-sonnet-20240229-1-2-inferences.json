[{"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import subprocess\n\ndef test_valid_addition():\n    \"\"\"\n    Test that the application correctly performs addition\n    when provided with valid inputs.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"2\", \"3\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 5\"\n\ndef test_valid_multiplication():\n    \"\"\"\n    Test that the application correctly performs multiplication\n    when provided with valid inputs.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"multiply\", \"4\", \"5\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 20\"\n\ndef test_invalid_operation():\n    \"\"\"\n    Test that the application handles invalid operations gracefully\n    by raising an exception or displaying an appropriate error message.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"divide\", \"10\", \"2\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\ndef test_non_numeric_arguments():\n    \"\"\"\n    Test that the application handles non-numeric arguments gracefully\n    by raising an exception or displaying an appropriate error message.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"2\", \"a\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\ndef test_missing_arguments():\n    \"\"\"\n    Test that the application handles missing arguments gracefully\n    by raising an exception or displaying an appropriate error message.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"2\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.returncode != 0\n\ndef test_addition_large_numbers():\n    \"\"\"\n    Test that the application correctly handles addition\n    with large numbers.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"add\", \"9999999999\", \"1\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert\n    assert result.stdout.strip() == \"Result: 10000000000\"\n\ndef test_multiplication_zero():\n    \"\"\"\n    Test that the application correctly handles multiplication\n    with zero.\n    \"\"\"\n    # Arrange\n    args = [\"evalmath.py\", \"multiply\", \"0\", \"5\"]\n\n    # Act\n    result = subprocess.run(args, capture_output=True, text=True)\n\n    # Assert"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE, STDOUT\n\n# Helper function to run the CLI application\ndef run_cli(args):\n    cmd = [\"python\", \"evalmath.py\"] + args\n    result = run(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    return result.stdout, result.stderr\n\n# Test addition operation with valid inputs\ndef test_add_valid():\n    # Arrange\n    args = [\"add\", \"5\", \"3\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr == \"\"\n    assert stdout.strip() == \"Result: 8\"\n\n# Test multiplication operation with valid inputs\ndef test_multiply_valid():\n    # Arrange\n    args = [\"multiply\", \"4\", \"6\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stderr == \"\"\n    assert stdout.strip() == \"Result: 24\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"divide\", \"10\", \"2\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test non-integer input for first number\ndef test_non_int_first_number():\n    # Arrange\n    args = [\"add\", \"hello\", \"5\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test non-integer input for second number\ndef test_non_int_second_number():\n    # Arrange\n    args = [\"multiply\", \"3\", \"world\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test with no arguments provided\ndef test_no_arguments():\n    # Arrange\n    args = []\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test with only one argument provided\ndef test_one_argument():\n    # Arrange\n    args = [\"add\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test with only two arguments provided\ndef test_two_arguments():\n    # Arrange\n    args = [\"add\", \"10\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()\n\n# Test with more than three arguments provided\ndef test_extra_arguments():\n    # Arrange\n    args = [\"multiply\", \"2\", \"4\", \"6\"]\n\n    # Act\n    stdout, stderr = run_cli(args)\n\n    # Assert\n    assert stdout == \"\"\n    assert \"error\" in stderr.lower()"}, {"eval_instance": "evalmath", "requirement": "    The CLI application is a simple command-line tool that performs basic arithmetic operations on two numbers. It accepts three command-line arguments: the operation to be performed (either \"add\" or \"multiply\"), the first number, and the second number. The application should handle these arguments correctly and perform the specified operation on the provided numbers. For the \"add\" operation, the application should add the two numbers together and display the result. Similarly, for the \"multiply\" operation, it should multiply the two numbers and display the result. The application should handle invalid operations gracefully by raising an exception or displaying an appropriate error message. The numbers provided as arguments should be parsed as integers. The application should be implemented in Python and should be executable from the command line using the python command followed by the script name and the required arguments. The result format is \"Result: <result/>\" where <result/> is the result of the operation. The python file should be named \"evalmath.py\".", "test_code": "import pytest\nfrom subprocess import run, PIPE\n\n# Helper function to run the evalmath.py script\ndef run_evalmath(args):\n    result = run([\"python\", \"evalmath.py\"] + args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\n    return result.stdout.strip(), result.stderr.strip()\n\n# Test valid addition operation\ndef test_valid_addition():\n    # Arrange\n    args = [\"add\", \"5\", \"3\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error == \"\"\n    assert output == \"Result: 8\"\n\n# Test valid multiplication operation\ndef test_valid_multiplication():\n    # Arrange\n    args = [\"multiply\", \"4\", \"6\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error == \"\"\n    assert output == \"Result: 24\"\n\n# Test invalid operation\ndef test_invalid_operation():\n    # Arrange\n    args = [\"subtract\", \"10\", \"2\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error != \"\"\n    assert output == \"\"\n\n# Test non-numeric input\ndef test_non_numeric_input():\n    # Arrange\n    args = [\"add\", \"5\", \"abc\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error != \"\"\n    assert output == \"\"\n\n# Test zero operands\ndef test_zero_operands():\n    # Arrange\n    args = [\"add\", \"0\", \"0\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error == \"\"\n    assert output == \"Result: 0\"\n\n# Test large numbers\ndef test_large_numbers():\n    # Arrange\n    args = [\"multiply\", \"9999999\", \"9999999\"]\n    \n    # Act\n    output, error = run_evalmath(args)\n    \n    # Assert\n    assert error == \"\"\n    assert output == \"Result: 99999980000001\""}]
